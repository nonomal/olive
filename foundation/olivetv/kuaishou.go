package olivetv

import (
	"errors"
	"fmt"
	"regexp"
	"sort"
	"time"

	"github.com/imroc/req/v3"
	jsoniter "github.com/json-iterator/go"
)

func init() {
	registerSite("kuaishou", &kuaishou{})
}

type kuaishou struct {
	base
}

func (this *kuaishou) ID() SiteID {
	return "kuaishou"
}

func (this *kuaishou) Name() string {
	return "快手"
}

func (this *kuaishou) Snap(tv *TV) (err error) {
	tv.Info = &Info{
		Timestamp: time.Now().Unix(),
	}
	return this.set(tv)
}

func (this *kuaishou) set(tv *TV) error {
	// api := "https://live.kuaishou.com/u/ff2523341061"
	api := "https://live.kuaishou.com/u/" + tv.RoomID
	resp, err := req.R().
		SetHeaders(map[string]string{
			HeaderUserAgent: CHROME,
			HeaderCookie:    tv.cookie,
		}).
		Get(api)
	if err != nil {
		return err
	}

	content := resp.String()

	re := regexp.MustCompile(`<script>window.__INITIAL_STATE__=([\s\S]*?);\(function`)
	caps := re.FindStringSubmatch(content)
	if len(caps) < 2 {
		return errors.New("kuaishou: content=%s" + content)
	}

	text := caps[1]

	// f, _ := os.Create("b.json")
	// f.WriteString(text)
	// f.Close()

	var ag KuaishouAutoGenerated
	err = jsoniter.UnmarshalFromString(text, &ag)
	if err != nil {
		return fmt.Errorf("kuaishou: text=%s\nerr=%s", text, err.Error())
	}

	if len(ag.Liveroom.PlayList) == 0 {
		return errors.New("kuaishou: empty PlayList")
	}

	data := ag.Liveroom.PlayList[0]

	tv.roomName = data.LiveStream.Caption
	tv.streamerName = data.Author.Name

	tv.roomOn = data.IsLiving
	if !tv.roomOn {
		return nil
	}

	playUrls := data.LiveStream.PlayUrls
	if len(playUrls) == 0 {
		return errors.New("kuaishou: empty playUrls")
	}
	cands := playUrls[0].AdaptationSet.Representation
	if len(cands) == 0 {
		return errors.New("kuaishou: empty cands")
	}
	sort.Slice(cands, func(i, j int) bool {
		return cands[i].Bitrate > cands[j].Bitrate
	})
	tv.streamURL = cands[0].URL
	return nil
}

type KuaishouAutoGenerated struct {
	Liveroom struct {
		PlayList []struct {
			LiveStream struct {
				Caption  string `json:"caption"`
				PlayUrls []struct {
					AdaptationSet struct {
						Representation []struct {
							URL     string `json:"url"`
							Bitrate int    `json:"bitrate"`
						} `json:"representation"`
					} `json:"adaptationSet"`
				} `json:"playUrls"`
			} `json:"liveStream"`
			Author struct {
				Name string `json:"name"`
			} `json:"author"`
			IsLiving bool `json:"isLiving"`
		} `json:"playList"`
	} `json:"liveroom"`
}
